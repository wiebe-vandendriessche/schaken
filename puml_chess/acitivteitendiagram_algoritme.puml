@startuml alpha beta algoritme
note
  Function minimax is called like:
  minimax(board, depth, alpha, beta, isWhite)
  and it returns a the value that is the best (for white the highest and black the smallest)
end note
start
note right
  "board" is a deep copy of 
  the "board" but with a piece moved.
end note
if (depth==0) then (true)
  :Return evaluation of 
  current given position;
  note right
    Calls the evaluationfunction 
    that evaluates the new position
  end note

 else if (whites turn) then (true)
  :Initialize maxEval to -infinity;
  :Call first whileloop;
  :Return maxEval;
else (false)
  :Initialize minEval to +infinity;
  :Call second whileloop;
  :Return minEval;
endif
stop

note
  After  every move is calculated 
end note

start
note right
  start whileloop if it's whites turn
end note
  while(remaining possible moves for black) is (true)
    :Call minimax again with a deep copy 
    of the new board and a new possible move on it
    and a depth of depth-1, minimax will give back
    a value to a new variable "eval";
    note right
      "alpha" and "beta" are given the same 
      value as before and now is minimax 
      called for the opposite sided (black)
    end note
    :maxEval = max(maxEval, eval);
    :alpha = max(alpha, eval);
    if (beta <= alpha) is (true) then
      break
    endif
  endwhile (false)
stop
note left
  continue with main program
end note

start 
note right
  whileloop if it's blacks turn
end note
while(remaining possible moves for white) is (true)
    :Call minimax again with a deep copy 
    of the new board and a new possible move on it
    and a depth of depth-1, minimax will give back
    a value to a new variable "eval";
    note right
      "alpha" and "beta" of this function are given 
      with the new function and now is minimax 
      called for the opposite sided (white)
    end note
    :minEval = min(maxEval, eval);
    :beta = min(alpha, eval);
    if (beta <= alpha) is (true) then
      break
    endif
  endwhile (false)
stop
note left 
  continue with main program
end note
@enduml